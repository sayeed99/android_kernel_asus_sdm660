#!/bin/bash

export ARCH=arm64
export HEADER_ARCH=arm64
export CROSS_COMPILE2=aarch64-linux-gnu-
export CCOMPILE=$CROSS_COMPILE2

#Change Toolchain GCC versions from here
#But I personally prefer Google's TC and Clang
GCC_VERSION=4.9
CLANG_DIR=google_clang

TC_PREFIX=aarch64-linux-gnu
TOOLCHAIN=$TC_PREFIX-$GCC_VERSION
CUR_DIR=$PWD

toolchain_url="https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9"
clang_url="https://github.com/sayeed99/clang-4691093-pie"

clear

echo "---------------SETTING UP ENVIRONMENT---------------"
start=`date +%s`
NOW=$(date +"%d-%m-%Y")
echo "Current Date : $NOW"
echo "Applying Build Settings"
export SLEEP=1
echo "Setting CPU Cores/Threads"
export CPUS=`nproc`
echo "Setting Version Number"
export VER=v$1
echo "Setting Defconfig"
export DEFCONFIG=X00TD_defconfig
echo "Setting bzImage Location For FlareP kernel"
export BZIMAGE=gen/arch/arm64/boot/Image.gz-dtb
echo "Enabling Graphite Optimizations"
export ENABLE_GRAPHITE=true
export EV=EXTRAVERSION=_FlareP_v$1
echo "Environment Setup Complete Now Moving To Compiling"
echo ""
echo ""
echo ""
echo "-----CHECKING IF TOOLCHAIN AND CLANG IS IN CORRECT PATH-------"
sleep $SLEEP
cd ..
TC=$PWD
if [ -f $TC/$TOOLCHAIN/bin/$TC_PREFIX-gcc ];
then
   cd $CUR_DIR
   echo "ToolChain exists"
   echo "Starting Compilation"
   echo "SETTING TOOLCHAIN PATH : $TC/$TOOLCHAIN/bin"
   export PATH=$TC/$TOOLCHAIN/bin-ccache:$TC/$TOOLCHAIN/bin:$PATH
   echo ""
   echo ""
   echo ""
else
   echo "Could not find toolchain at $TC/$TOOLCHAIN/"
   echo "DOWNLOADING TOOLCAHIN"
   git clone $toolchain_url $TOOLCHAIN
   echo "Starting Compilation"
   echo "SETTING TOOLCHAIN PATH : $TC/$TOOLCHAIN/bin"
   export PATH=$TC/$TOOLCHAIN/bin-ccache:$TC/$TOOLCHAIN/bin:$PATH
   echo ""
   echo ""
   echo ""
fi

if [ -f $TC/$CLANG_DIR/bin/clang ];
then
   cd $CUR_DIR
   echo "Clang exists"
   echo "Starting Compilation"
   echo "SETTING Clang PATH : $TC/$CLANG_DIR/bin"
   export PATH=$TC/$CLANG_DIR/bin-ccache:$TC/$CLANG_DIR/bin:$PATH
   echo ""
   echo ""
   echo ""
   sleep $SLEEP
   echo "------------------COMPILING----------------------"
else
   echo "Could not find clang at $TC/$CLANG_DIR/"
   echo "DOWNLOADING TOOLCAHIN"
   git clone $clang_url $CLANG_DIR
   echo "Starting Compilation"
   echo "SETTING Clang PATH : $TC/$CLANG_DIR/bin"
   export PATH=$TC/$CLANG_DIR/bin-ccache:$TC/$CLANG_DIR/bin:$PATH
   echo ""
   echo ""
   echo ""
   sleep $SLEEP
   cd $CUR_DIR
   echo "------------------COMPILING----------------------"
fi

#Build
sleep $SLEEP
#make O=gen clean && make O=gen mrproper
echo "Starting Build Process"
export USE_CCACHE=1
sleep $SLEEP
mkdir -p gen
if [ -f .config ];
then
   echo ".config exists"
else
   echo ".config Does Not Exists"
   echo "Compiling From $DEFCONFIG"
   make O=gen ARCH=arm64 $DEFCONFIG
   sleep $SLEEP
fi
make -j$(nproc --all) O=gen \
                      ARCH=arm64 \
                      CC="$TC/$CLANG_DIR/bin/clang" \
                      CLANG_TRIPLE=$TC_PREFIX \
                      CROSS_COMPILE="$TC/$TOOLCHAIN/bin/$CROSS_COMPILE2" 2>&1 | tee build.log

if [ -f $BZIMAGE ];
then
   echo "$BZIMAGE exists"
   echo "-------------------SUCCESS-----------------------"
   echo ""
   echo ""
   echo ""
   sleep $SLEEP
else
   echo "-----------------------------------ERROR------------------------------------"
   echo "      Failed to compile. Please Check *build.log* For Compile Errors"
   echo "-----------------------------------ERROR------------------------------------"
   echo "exiting script"
   sleep $SLEEP
   exit 0
fi

clear
echo "--------------------PACKING-------------------------"
echo "Starting Packing To Recovery Flashable Zip"
rm -rf out/modules/*
find . -name '*.ko' -exec $TC/$TOOLCHAIN/bin/aarch64-linux-gnu-strip --strip-debug {} \;
#find . -name '*.ko' -exec ./scripts/sign-file sha256 ./signing_key.priv ./signing_key.x509 {} \;
find . -name '*.ko' -exec cp {} out/modules/ \;
cd out/
#rm -rf modules/*
echo "Removing Old Files"
rm -rf Image.gz-dtb *.zip
sleep $SLEEP
echo "Copying bzImage"
mv ../gen/arch/arm64/boot/Image.gz-dtb Image.gz-dtb
sleep $SLEEP
echo "Packing FlareP_"$VER".zip"
zip -r FlareP_"$VER".zip *
nowf=$(date +"%T")
cd ..
echo "Current Date : $NOW"
echo "Applying Build Settings : done"
echo "Version Number = $VER"
echo "cleaning previous files : done"
echo "Starting Build Process  : done"
echo "Build complete"

end=`date +%s`
runtime=$((end-start))
echo "Completion Time :"
echo "$runtime sec\n"

echo "------------------- CLEANING------------------------"
make O=gen clean
rm -rf gen
echo "----------------------DONE--------------------------"

